{"version":3,"sources":["theme.ts","Square.tsx","validate.ts","puzzles.ts","App.tsx","serviceWorker.js","index.tsx"],"names":["theme","opacity","arguments","length","undefined","concat","Square","_ref","icon","state","cantChange","onPress","isInConnected","isStart","isInInvalidFourSquare","onMouseDown","onMouseUp","onMouseEnter","hasPiece","react_default","a","createElement","md","style","position","fontSize","color","backgroundColor","borderColor","fourSquareBackground","boxShadow","className","onClick","height","width","borderRadius","background","display","justifyContent","alignItems","backgroundSize","contiguousX","contiguousY","squaresOfColorConnected","grid","startingX","startingY","size","startingSquareObj","square","x","y","squaresStack","visitedSquares","squaresToReturn","currentSquare","shift","push","currentX","currentY","_loop","i","nextX","nextY","nextSquare","alreadyVisited","find","nextSquareObj","puzzles","blacks","whites","SIZE","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","clickPiece","locked","newColor","changePieceColor","newGrid","cloneDeep","setState","showCongrats","puzzle","first","row","id","includes","currentPuzzle","draggingColor","_this2","rows","connectedBlackSquares","connectedWhiteSquares","invalidFourSquareSets","invalidSquareSets","squares","numBlack","numWhite","forEach","validFourSquares","isFourSquareValid","rowSquares","_loop2","isConnectedBlack","isConnectedWhite","src_Square","key","isFullyConnectedGrid","onMouseLeave","top","left","flexDirection","cursor","maxWidth","paddingLeft","paddingRight","textAlign","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7028d98f.chunk.js","sourcesContent":["export default {\r\n    whitePiece: (opacity: number = 1) => `rgba(224, 130, 131, ${opacity})`,\r\n    blackPiece: (opacity: number = 1) => `rgba(52, 73, 94, ${opacity})`,\r\n};\r\n","import React, { Component, useState } from 'react';\r\nimport { MdLock, MdGrade } from 'react-icons/md';\r\nimport './App.css';\r\nimport theme from './theme';\r\n\r\ninterface IProps {\r\n    state: any;\r\n    cantChange: boolean;\r\n    onPress();\r\n    isInConnected: boolean;\r\n    isStart: boolean;\r\n    isInInvalidFourSquare: boolean;\r\n    onMouseDown();\r\n    onMouseUp();\r\n    onMouseEnter();\r\n}\r\n\r\nconst Square = ({\r\n    state,\r\n    cantChange,\r\n    onPress,\r\n    isInConnected,\r\n    isStart,\r\n    isInInvalidFourSquare,\r\n    onMouseDown,\r\n    onMouseUp,\r\n    onMouseEnter,\r\n}: IProps) => {\r\n    const hasPiece = state !== 'empty';\r\n    let icon;\r\n    if (isStart) {\r\n        icon = (\r\n            <MdGrade\r\n                style={{\r\n                    position: 'absolute',\r\n                    fontSize: 24,\r\n                    color: 'rgba(243, 241, 240, 1)',\r\n                }}\r\n            />\r\n        );\r\n    } else if (cantChange) {\r\n        icon = (\r\n            <MdLock\r\n                style={{\r\n                    position: 'absolute',\r\n                    fontSize: 16,\r\n                    color: 'rgba(243, 241, 249, 1)',\r\n                }}\r\n            />\r\n        );\r\n    }\r\n    const opacity = isInConnected ? 1 : 0.5;\r\n    const backgroundColor =\r\n        state === 'white'\r\n            ? theme.whitePiece(opacity)\r\n            : theme.blackPiece(opacity);\r\n    const borderColor =\r\n        state === 'white' ? theme.whitePiece(0.9) : theme.blackPiece(0.9);\r\n    let validBorderColor = `inset 0px 0px 0px 1px ${borderColor}`;\r\n\r\n    const fourSquareBackground =\r\n        state === 'white'\r\n            ? `linear-gradient(135deg, \r\n        rgba(76, 79, 79, .7)\r\n         25%, rgba(0, 0, 0, 0) \r\n         25%, rgba(0, 0, 0, 0) \r\n         50%,rgba(76, 79, 79, .7)\r\n         50%,rgba(76, 79, 79, .7)\r\n         75%, rgba(0, 0, 0, 0) \r\n         75%, rgba(0, 0, 0, 0) 100%)`\r\n            : `linear-gradient(135deg, \r\n            rgba(223, 221, 219, .7)\r\n             25%, rgba(0, 0, 0, 0) \r\n             25%, rgba(0, 0, 0, 0) \r\n             50%,rgba(223, 221, 219, .7)\r\n             50%,rgba(223, 221, 219, .7)\r\n             75%, rgba(0, 0, 0, 0) \r\n             75%, rgba(0, 0, 0, 0) 100%)`;\r\n    const boxShadow = validBorderColor;\r\n    return (\r\n        <div\r\n            className=\"piece\"\r\n            onClick={onPress}\r\n            onMouseDown={onMouseDown}\r\n            onMouseUp={onMouseUp}\r\n            onMouseEnter={onMouseEnter}\r\n        >\r\n            {hasPiece && (\r\n                <div\r\n                    style={{\r\n                        height: '100%',\r\n                        width: '100%',\r\n                        boxShadow,\r\n                        borderRadius: 1,\r\n                        background: backgroundColor,\r\n                        display: 'flex',\r\n                        justifyContent: 'center',\r\n                        alignItems: 'center',\r\n                    }}\r\n                >\r\n                    {icon}\r\n                </div>\r\n            )}\r\n            {isInInvalidFourSquare && (\r\n                <div\r\n                    style={{\r\n                        position: 'absolute',\r\n                        height: '100%',\r\n                        width: '100%',\r\n                        background: fourSquareBackground,\r\n                        backgroundSize: `20px 20px`,\r\n                    }}\r\n                />\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Square;\r\n","import { find } from 'lodash';\r\nimport { Grid } from './types';\r\n\r\n// this is such a weird way to do it\r\nconst contiguousX = [-1, 1, 0, 0];\r\nconst contiguousY = [0, 0, -1, 1];\r\n\r\nexport const gridIsFull = (grid: Grid) => {\r\n    const size = grid[0].length;\r\n    for (let i = 0; i < size; i++) {\r\n        for (let j = 0; j < size; j++) {\r\n            if (grid[i][j].state === 'empty') {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n};\r\n\r\nexport const squaresOfColorConnected = (\r\n    grid: Grid,\r\n    startingX: number,\r\n    startingY: number,\r\n    color: 'black' | 'white'\r\n) => {\r\n    const size = grid[0].length;\r\n\r\n    const startingSquareObj = {\r\n        square: grid[startingX][startingY],\r\n        x: startingX,\r\n        y: startingY,\r\n    };\r\n    const squaresStack = [startingSquareObj]; // this more of a \"stack\" than a stack\r\n    const visitedSquares = [startingSquareObj];\r\n\r\n    const squaresToReturn = [];\r\n    while (squaresStack.length) {\r\n        const currentSquare = squaresStack.shift();\r\n        squaresToReturn.push(currentSquare);\r\n        const currentX = currentSquare.x;\r\n        const currentY = currentSquare.y;\r\n\r\n        for (let i = 0; i < contiguousX.length; i += 1) {\r\n            const nextX = contiguousX[i] + currentX;\r\n            const nextY = contiguousY[i] + currentY;\r\n            if (nextX < 0 || nextX >= size) {\r\n                continue;\r\n            }\r\n            if (nextY < 0 || nextY >= size) {\r\n                continue;\r\n            }\r\n            const nextSquare = grid[nextY][nextX];\r\n            const alreadyVisited = find(visitedSquares, square => {\r\n                return square.x === nextX && square.y === nextY;\r\n            });\r\n            if (nextSquare.state === color && !alreadyVisited) {\r\n                const nextSquareObj = {\r\n                    square: nextSquare,\r\n                    x: nextX,\r\n                    y: nextY,\r\n                };\r\n                visitedSquares.push(nextSquareObj);\r\n                squaresStack.push(nextSquareObj);\r\n            }\r\n        }\r\n    }\r\n    return squaresToReturn;\r\n};\r\n\r\nexport const validFourSquares = (grid: Grid) => {\r\n    const size = grid[0].length;\r\n    const invalidSquareSets = [];\r\n    for (let y = 0; y < size - 1; y += 1) {\r\n        for (let x = 0; x < size - 1; x += 1) {\r\n            const squares = [\r\n                grid[y][x],\r\n                grid[y + 1][x],\r\n                grid[y][x + 1],\r\n                grid[y + 1][x + 1],\r\n            ];\r\n            let numBlack = 0;\r\n            let numWhite = 0;\r\n            squares.forEach(square => {\r\n                if (square.state === 'black') {\r\n                    numBlack += 1;\r\n                } else if (square.state === 'white') {\r\n                    numWhite += 1;\r\n                }\r\n            });\r\n            if (numBlack === 4 || numWhite === 4) {\r\n                invalidSquareSets.push(\r\n                    {\r\n                        x,\r\n                        y,\r\n                    },\r\n                    {\r\n                        x: x + 1,\r\n                        y,\r\n                    },\r\n                    {\r\n                        x,\r\n                        y: y + 1,\r\n                    },\r\n                    {\r\n                        x: x + 1,\r\n                        y: y + 1,\r\n                    }\r\n                );\r\n            }\r\n        }\r\n    }\r\n    return invalidSquareSets;\r\n};\r\n","export default [\r\n    {\r\n        blacks: [\r\n            0,\r\n            1,\r\n            2,\r\n            3,\r\n            4,\r\n            10,\r\n            16,\r\n            20,\r\n            23,\r\n            25,\r\n            30,\r\n            31,\r\n            34,\r\n            40,\r\n            42,\r\n            50,\r\n            54,\r\n            60,\r\n            65,\r\n            67,\r\n            70,\r\n            72,\r\n            74,\r\n            80,\r\n            83,\r\n            86,\r\n            90,\r\n            91,\r\n            92,\r\n            93,\r\n            94,\r\n            96,\r\n\r\n            95,\r\n            97,\r\n            98,\r\n            99,\r\n        ],\r\n        whites: [5, 6, 7, 8, 9, 11, 27, 37, 43, 44, 46, 48, 62, 88],\r\n    },\r\n];\r\n","import React, { Component, useState } from 'react';\nimport Square from './Square';\nimport { cloneDeep, find, first } from 'lodash';\nimport './App.css';\nimport { Grid, SquareState } from './types';\nimport {\n    gridIsFull,\n    validFourSquares,\n    squaresOfColorConnected,\n} from './validate';\nimport puzzles from './puzzles';\nimport filled from './filled';\n\nconst SIZE = 10; // cannot be larger than 10\n\n// no 2x2 can all have the same color\n// continguous\n\n// generate:\n// generate: start from scratch and add valid squares\n\ninterface IProps {}\ninterface IState {\n    grid: Grid;\n    draggingColor?: SquareState;\n    currentPuzzle: any;\n    showCongrats: boolean;\n}\n\nclass App extends Component<IProps, IState> {\n    constructor(props) {\n        super(props);\n        const grid = [];\n        const puzzle = first(puzzles);\n        for (let y = 0; y < SIZE; y++) {\n            const row = [];\n            for (let x = 0; x < SIZE; x++) {\n                let id = y * 10 + x;\n                let locked = false;\n                let state = 'empty';\n                if (puzzle.blacks.includes(id)) {\n                    state = 'black';\n                    locked = true;\n                } else if (puzzle.whites.includes(id)) {\n                    state = 'white';\n                    locked = true;\n                }\n                row.push({\n                    state,\n                    locked,\n                });\n            }\n            grid.push(row);\n        }\n        this.state = {\n            grid,\n            currentPuzzle: puzzle,\n            draggingColor: undefined,\n            showCongrats: false,\n        };\n    }\n\n    clickPiece = (x: number, y: number) => {\n        const state = this.state.grid[y][x];\n        if (state.locked) {\n            return;\n        }\n        let newColor: SquareState = 'white';\n        if (state.state === 'white') {\n            newColor = 'black';\n        } else if (state.state === 'black') {\n            newColor = 'white';\n        }\n        this.changePieceColor(x, y, newColor);\n    };\n\n    changePieceColor = (x: number, y: number, color: SquareState) => {\n        const state = this.state.grid[y][x];\n        const newGrid = cloneDeep(this.state.grid);\n        newGrid[y][x] = {\n            locked: state.locked,\n            state: color,\n        };\n        this.setState({\n            grid: newGrid,\n            showCongrats: true,\n        });\n    };\n\n    render() {\n        const rows = [];\n        const connectedBlackSquares = squaresOfColorConnected(\n            this.state.grid,\n            0,\n            0,\n            'black'\n        );\n        const connectedWhiteSquares = squaresOfColorConnected(\n            this.state.grid,\n            SIZE - 1,\n            0,\n            'white'\n        );\n        const invalidFourSquareSets = validFourSquares(this.state.grid);\n        const isFourSquareValid = invalidFourSquareSets.length === 0;\n        for (let y = 0; y < SIZE; y++) {\n            const rowSquares = [];\n            for (let x = 0; x < SIZE; x++) {\n                let id = y * 10 + x;\n                let state = this.state.grid[y][x];\n                const isConnectedBlack = find(connectedBlackSquares, square => {\n                    return square.x === x && square.y === y;\n                });\n                const isConnectedWhite = find(connectedWhiteSquares, square => {\n                    return square.x === x && square.y === y;\n                });\n                const isInInvalidFourSquare = find(\n                    invalidFourSquareSets,\n                    square => {\n                        return square.x === x && square.y === y;\n                    }\n                );\n\n                const isStart = y === 0 && (x === 0 || x === SIZE - 1);\n                rowSquares.push(\n                    <Square\n                        isStart={isStart}\n                        onPress={() => this.clickPiece(x, y)}\n                        isInConnected={isConnectedBlack || isConnectedWhite}\n                        isInInvalidFourSquare={isInInvalidFourSquare}\n                        onMouseDown={() => {\n                            this.setState({\n                                draggingColor: state.state,\n                            });\n                        }}\n                        onMouseEnter={() => {\n                            if (state.locked) {\n                                return;\n                            }\n                            if (this.state.draggingColor) {\n                                this.changePieceColor(\n                                    x,\n                                    y,\n                                    this.state.draggingColor\n                                );\n                            }\n                        }}\n                        onMouseUp={() =>\n                            this.setState({\n                                draggingColor: undefined,\n                            })\n                        }\n                        key={id}\n                        cantChange={state.locked}\n                        state={state.state}\n                    />\n                );\n            }\n            rows.push(\n                <div className=\"flex-row\" key={y}>\n                    {rowSquares}\n                </div>\n            );\n        }\n        const isFullyConnectedGrid =\n            connectedBlackSquares.length + connectedWhiteSquares.length ===\n            SIZE * SIZE;\n\n        return (\n            <div className=\"container-fluid\">\n                <div className=\"info\">\n                    <div className=\"title\">In a Cave</div>\n                </div>\n                <div\n                    style={{ position: 'relative' }}\n                    onMouseLeave={() =>\n                        this.setState({ draggingColor: undefined })\n                    }\n                >\n                    {rows}\n                    {this.state.showCongrats &&\n                        isFullyConnectedGrid &&\n                        isFourSquareValid && (\n                            <div\n                                style={{\n                                    position: 'absolute',\n                                    height: '100%',\n                                    width: '100%',\n                                    top: 0,\n                                    left: 0,\n                                    background: 'rgba(46, 49, 49, .9)',\n                                    display: 'flex',\n                                    justifyContent: 'center',\n                                    alignItems: 'center',\n                                    color: 'white',\n                                }}\n                            >\n                                <div\n                                    style={{\n                                        display: 'flex',\n                                        alignItems: 'center',\n                                        flexDirection: 'column',\n                                    }}\n                                >\n                                    <h2>\n                                        Congratulations! You've completed the\n                                        grid\n                                    </h2>\n                                    <div\n                                        style={{ cursor: 'pointer' }}\n                                        onClick={() =>\n                                            this.setState({\n                                                showCongrats: false,\n                                            })\n                                        }\n                                    >\n                                        Close\n                                    </div>\n                                </div>\n                            </div>\n                        )}\n                </div>\n                {/* <div\n                    onClick={() => console.log(JSON.stringify(this.state.grid))}\n                >\n                    Save Board\n                </div> */}\n                <p\n                    style={{\n                        maxWidth: 530,\n                        paddingLeft: 20,\n                        paddingRight: 20,\n                    }}\n                >\n                    Fill up the entire board so the following are true:\n                </p>\n                <ul style={{ textAlign: 'left' }}>\n                    <li>Every square is filled in</li>\n                    <li>\n                        Every square lights up, which means it's connected to\n                        the star square through squares of the same color\n                        (diagonals don't count)\n                    </li>\n                    <li>\n                        Each 2 x 2 section does not contain all squares of the\n                        same color\n                    </li>\n                </ul>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}