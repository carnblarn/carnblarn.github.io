{"version":3,"sources":["data/db.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["boards","board","answers","clues","word","accuracy","highestAccuracy","App","useState","boardIndex","setBoardIndex","data","words","right","setRight","wrong","setWrong","grid","map","className","includes","onClick","toUpperCase","length","alert","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mPAAe,G,MAAA,CACXA,OAAQ,CACJ,CACIC,MAAO,CACH,UACA,OACA,QACA,SACA,SACA,MACA,OACA,SACA,UAEJC,QAAS,CAAC,SAAU,OAAQ,UAC5BC,MAAO,CACH,CACIC,KAAM,MACNC,SAAU,QAEd,CACID,KAAM,OACNC,SAAU,QAEd,CACID,KAAM,QACNC,SAAU,QAEd,CACID,KAAM,UACNC,SAAU,QAEd,CACID,KAAM,QACNC,SAAU,SAGlBC,gBAAiB,QAErB,CACIL,MAAO,CACH,QACA,OACA,SACA,QACA,UACA,SACA,MACA,UACA,UAEJC,QAAS,CAAC,UAAW,SAAU,SAC/BC,MAAO,CACH,CACIC,KAAM,WACNC,SAAU,QAEd,CACID,KAAM,UACNC,SAAU,QAEd,CACID,KAAM,SACNC,SAAU,QAEd,CACID,KAAM,OACNC,SAAU,QAEd,CACID,KAAM,OACNC,SAAU,SAGlBC,gBAAiB,QAErB,CACIL,MAAO,CACH,OACA,MACA,QACA,MACA,SACA,QACA,OACA,QACA,SAEJC,QAAS,CAAC,MAAO,OAAQ,QACzBC,MAAO,CACH,CACIC,KAAM,QACNC,SAAU,QAEd,CACID,KAAM,UACNC,SAAU,QAEd,CACID,KAAM,UACNC,SAAU,QAEd,CACID,KAAM,QACNC,SAAU,QAEd,CACID,KAAM,QACNC,SAAU,SAGlBC,gBAAiB,QAErB,CACIL,MAAO,CACH,SACA,QACA,OACA,OACA,QACA,OACA,OACA,QACA,SAEJC,QAAS,CAAC,OAAQ,OAAQ,SAC1BC,MAAO,CACH,CACIC,KAAM,SACNC,SAAU,QAEd,CACID,KAAM,OACNC,SAAU,QAEd,CACID,KAAM,QACNC,SAAU,QAEd,CACID,KAAM,SACNC,SAAU,QAEd,CACID,KAAM,QACNC,SAAU,UAGlBC,gBAAiB,QAErB,CACIL,MAAO,CACH,OACA,QACA,UACA,QACA,OACA,SACA,MACA,MACA,QAEJC,QAAS,CAAC,QAAS,OAAQ,QAC3BC,MAAO,CACH,CACIC,KAAM,QACNC,SAAU,QAEd,CACID,KAAM,OACNC,SAAU,QAEd,CACID,KAAM,KACNC,SAAU,QAEd,CACID,KAAM,QACNC,SAAU,QAEd,CACID,KAAM,OACNC,SAAU,SAGlBC,gBAAiB,QAErB,CACIL,MAAO,CACH,OACA,QACA,MACA,SACA,QACA,MACA,SACA,QACA,SAEJC,QAAS,CAAC,OAAQ,QAAS,SAC3BC,MAAO,CACH,CACIC,KAAM,YACNC,SAAU,QAEd,CACID,KAAM,SACNC,SAAU,QAEd,CACID,KAAM,YACNC,SAAU,QAEd,CACID,KAAM,UACNC,SAAU,QAEd,CACID,KAAM,SACNC,SAAU,SAGlBC,gBAAiB,QAErB,CACIL,MAAO,CACH,SACA,SACA,QACA,QACA,QACA,MACA,SACA,QACA,SAEJC,QAAS,CAAC,SAAU,MAAO,SAC3BC,MAAO,CACH,CACIC,KAAM,QACNC,SAAU,QAEd,CACID,KAAM,OACNC,SAAU,QAEd,CACID,KAAM,WACNC,SAAU,QAEd,CACID,KAAM,SACNC,SAAU,QAEd,CACID,KAAM,OACNC,SAAU,SAGlBC,gBAAiB,QAErB,CACIL,MAAO,CACH,SACA,QACA,OACA,OACA,SACA,MACA,SACA,OACA,QAEJC,QAAS,CAAC,OAAQ,OAAQ,SAC1BC,MAAO,CACH,CACIC,KAAM,MACNC,SAAU,QAEd,CACID,KAAM,OACNC,SAAU,QAEd,CACID,KAAM,UACNC,SAAU,QAEd,CACID,KAAM,SACNC,SAAU,SAEd,CACID,KAAM,OACNC,SAAU,UAGlBC,gBAAiB,QAErB,CACIL,MAAO,CACH,UACA,QACA,UACA,OACA,OACA,OACA,QACA,SACA,SAEJC,QAAS,CAAC,QAAS,UAAW,QAC9BC,MAAO,CACH,CACIC,KAAM,YACNC,SAAU,QAEd,CACID,KAAM,SACNC,SAAU,QAEd,CACID,KAAM,MACNC,SAAU,QAEd,CACID,KAAM,WACNC,SAAU,QAEd,CACID,KAAM,aACNC,SAAU,SAGlBC,gBAAiB,QAErB,CACIL,MAAO,CACH,OACA,OACA,QACA,QACA,QACA,SACA,QACA,SACA,SAEJC,QAAS,CAAC,QAAS,QAAS,SAC5BC,MAAO,CACH,CACIC,KAAM,QACNC,SAAU,QAEd,CACID,KAAM,QACNC,SAAU,QAEd,CACID,KAAM,UACNC,SAAU,QAEd,CACID,KAAM,OACNC,SAAU,QAEd,CACID,KAAM,SACNC,SAAU,SAGlBC,gBAAiB,QAErB,CACIL,MAAO,CACH,SACA,OACA,QACA,OACA,OACA,QACA,QACA,QACA,SAEJC,QAAS,CAAC,OAAQ,QAAS,SAC3BC,MAAO,CACH,CACIC,KAAM,UACNC,SAAU,QAEd,CACID,KAAM,SACNC,SAAU,QAEd,CACID,KAAM,OACNC,SAAU,QAEd,CACID,KAAM,OACNC,SAAU,QAEd,CACID,KAAM,WACNC,SAAU,SAGlBC,gBAAiB,WC7UdC,EArEO,WAAO,IAAD,EACYC,mBAAiB,GAD7B,mBACjBC,EADiB,KACLC,EADK,KAElBT,EAAQU,EAAKX,OAAOS,GACpBG,EAAQX,EAAMA,MAHI,EAKEO,mBAAmB,IALrB,mBAKjBK,EALiB,KAKVC,EALU,OAMEN,mBAAmB,IANrB,mBAMjBO,EANiB,KAMVC,EANU,KAOlBC,EAAOL,EAAMM,KAAI,SAAAd,GACnB,IAAIe,EAAoB,QAMxB,OALIN,EAAMO,SAAShB,GACfe,EAAY,gBACLJ,EAAMK,SAAShB,KACtBe,EAAY,mBAGZ,yBACIE,QAAS,WACDpB,EAAMC,QAAQkB,SAAShB,GACvBU,EAAS,GAAD,mBAAKD,GAAL,CAAYT,KAEpBY,EAAS,GAAD,mBAAKD,GAAL,CAAYX,MAG5Be,UAAWA,GAEVf,EAAKkB,kBAKlB,OACI,yBAAKH,UAAU,OACX,wBAAIA,UAAU,SAAd,gBACA,yBAAKA,UAAU,YAAf,0FAKA,yBAAKA,UAAU,aAAaF,GAC5B,yBAAKE,UAAU,YAAf,QAEI,yBAAKA,UAAU,QAAQlB,EAAME,MAAM,GAAGC,KAAKkB,gBAE/C,yBAAKH,UAAU,oBACX,6CAAmBV,GACnB,yBACIU,UAAU,kBACVE,QAAS,WACDZ,IAAeE,EAAKX,OAAOuB,OAAS,GAKxCb,EAAcD,EAAa,GAC3BK,EAAS,IACTE,EAAS,KANLQ,MAAM,6BAJlB,cAeA,yBAAKL,UAAU,cAAf,oFCrDIM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ba38dafa.chunk.js","sourcesContent":["export default {\n    boards: [\n        {\n            board: [\n                'ketchup',\n                'game',\n                'pants',\n                'knight',\n                'france',\n                'pit',\n                'tube',\n                'temple',\n                'circle',\n            ],\n            answers: ['knight', 'game', 'france'],\n            clues: [\n                {\n                    word: 'war',\n                    accuracy: '0.08',\n                },\n                {\n                    word: 'fifa',\n                    accuracy: '0.07',\n                },\n                {\n                    word: 'spain',\n                    accuracy: '0.07',\n                },\n                {\n                    word: 'nicolas',\n                    accuracy: '0.06',\n                },\n                {\n                    word: 'roger',\n                    accuracy: '0.06',\n                },\n            ],\n            highestAccuracy: '0.08',\n        },\n        {\n            board: [\n                'stick',\n                'calf',\n                'church',\n                'witch',\n                'beijing',\n                'casino',\n                'oil',\n                'phoenix',\n                'europe',\n            ],\n            answers: ['phoenix', 'europe', 'stick'],\n            clues: [\n                {\n                    word: 'anywhere',\n                    accuracy: '0.05',\n                },\n                {\n                    word: 'getting',\n                    accuracy: '0.04',\n                },\n                {\n                    word: 'choice',\n                    accuracy: '0.03',\n                },\n                {\n                    word: 'best',\n                    accuracy: '0.03',\n                },\n                {\n                    word: 'lets',\n                    accuracy: '0.03',\n                },\n            ],\n            highestAccuracy: '0.05',\n        },\n        {\n            board: [\n                'worm',\n                'jam',\n                'knife',\n                'pie',\n                'figure',\n                'space',\n                'trip',\n                'sound',\n                'thumb',\n            ],\n            answers: ['jam', 'worm', 'trip'],\n            clues: [\n                {\n                    word: 'fever',\n                    accuracy: '0.04',\n                },\n                {\n                    word: 'buddies',\n                    accuracy: '0.03',\n                },\n                {\n                    word: 'birding',\n                    accuracy: '0.02',\n                },\n                {\n                    word: 'phish',\n                    accuracy: '0.02',\n                },\n                {\n                    word: 'buggy',\n                    accuracy: '0.01',\n                },\n            ],\n            highestAccuracy: '0.04',\n        },\n        {\n            board: [\n                'circle',\n                'comic',\n                'belt',\n                'calf',\n                'sound',\n                'film',\n                'soul',\n                'pound',\n                'paper',\n            ],\n            answers: ['calf', 'soul', 'comic'],\n            clues: [\n                {\n                    word: 'fables',\n                    accuracy: '0.03',\n                },\n                {\n                    word: 'vein',\n                    accuracy: '0.02',\n                },\n                {\n                    word: 'furry',\n                    accuracy: '0.02',\n                },\n                {\n                    word: 'surfer',\n                    accuracy: '0.01',\n                },\n                {\n                    word: 'bunny',\n                    accuracy: '-0.00',\n                },\n            ],\n            highestAccuracy: '0.03',\n        },\n        {\n            board: [\n                'star',\n                'whale',\n                'concert',\n                'swing',\n                'film',\n                'forest',\n                'pan',\n                'van',\n                'fork',\n            ],\n            answers: ['whale', 'fork', 'star'],\n            clues: [\n                {\n                    word: 'skull',\n                    accuracy: '0.08',\n                },\n                {\n                    word: 'mako',\n                    accuracy: '0.05',\n                },\n                {\n                    word: 'ox',\n                    accuracy: '0.02',\n                },\n                {\n                    word: 'bones',\n                    accuracy: '0.02',\n                },\n                {\n                    word: 'eats',\n                    accuracy: '0.01',\n                },\n            ],\n            highestAccuracy: '0.08',\n        },\n        {\n            board: [\n                'wall',\n                'pants',\n                'fly',\n                'temple',\n                'green',\n                'eye',\n                'shadow',\n                'eagle',\n                'chest',\n            ],\n            answers: ['wall', 'pants', 'green'],\n            clues: [\n                {\n                    word: 'patterned',\n                    accuracy: '0.09',\n                },\n                {\n                    word: 'fabric',\n                    accuracy: '0.07',\n                },\n                {\n                    word: 'insulated',\n                    accuracy: '0.06',\n                },\n                {\n                    word: 'printed',\n                    accuracy: '0.06',\n                },\n                {\n                    word: 'stripe',\n                    accuracy: '0.05',\n                },\n            ],\n            highestAccuracy: '0.09',\n        },\n        {\n            board: [\n                'litter',\n                'charge',\n                'glass',\n                'ivory',\n                'mouse',\n                'pit',\n                'canada',\n                'crane',\n                'march',\n            ],\n            answers: ['charge', 'pit', 'glass'],\n            clues: [\n                {\n                    word: 'drain',\n                    accuracy: '0.07',\n                },\n                {\n                    word: 'tear',\n                    accuracy: '0.06',\n                },\n                {\n                    word: 'entrance',\n                    accuracy: '0.05',\n                },\n                {\n                    word: 'inside',\n                    accuracy: '0.05',\n                },\n                {\n                    word: 'heat',\n                    accuracy: '0.05',\n                },\n            ],\n            highestAccuracy: '0.07',\n        },\n        {\n            board: [\n                'marble',\n                'watch',\n                'worm',\n                'drop',\n                'change',\n                'bow',\n                'mexico',\n                'film',\n                'king',\n            ],\n            answers: ['king', 'drop', 'watch'],\n            clues: [\n                {\n                    word: 'kid',\n                    accuracy: '0.04',\n                },\n                {\n                    word: 'rose',\n                    accuracy: '0.02',\n                },\n                {\n                    word: 'diamond',\n                    accuracy: '0.00',\n                },\n                {\n                    word: 'double',\n                    accuracy: '-0.02',\n                },\n                {\n                    word: 'beat',\n                    accuracy: '-0.02',\n                },\n            ],\n            highestAccuracy: '0.04',\n        },\n        {\n            board: [\n                'phoenix',\n                'cliff',\n                'centaur',\n                'code',\n                'duck',\n                'gold',\n                'tower',\n                'needle',\n                'sound',\n            ],\n            answers: ['tower', 'centaur', 'code'],\n            clues: [\n                {\n                    word: 'nuremberg',\n                    accuracy: '0.10',\n                },\n                {\n                    word: 'eeprom',\n                    accuracy: '0.06',\n                },\n                {\n                    word: 'pdb',\n                    accuracy: '0.05',\n                },\n                {\n                    word: 'terminus',\n                    accuracy: '0.04',\n                },\n                {\n                    word: 'heidelberg',\n                    accuracy: '0.04',\n                },\n            ],\n            highestAccuracy: '0.10',\n        },\n        {\n            board: [\n                'root',\n                'pole',\n                'dance',\n                'state',\n                'check',\n                'europe',\n                'knife',\n                'bridge',\n                'grass',\n            ],\n            answers: ['knife', 'check', 'grass'],\n            clues: [\n                {\n                    word: 'spray',\n                    accuracy: '0.08',\n                },\n                {\n                    word: 'cloth',\n                    accuracy: '0.07',\n                },\n                {\n                    word: 'sharpen',\n                    accuracy: '0.06',\n                },\n                {\n                    word: 'tear',\n                    accuracy: '0.04',\n                },\n                {\n                    word: 'rolled',\n                    accuracy: '0.04',\n                },\n            ],\n            highestAccuracy: '0.08',\n        },\n        {\n            board: [\n                'shadow',\n                'boom',\n                'cover',\n                'tube',\n                'hole',\n                'hotel',\n                'court',\n                'pants',\n                'force',\n            ],\n            answers: ['boom', 'cover', 'pants'],\n            clues: [\n                {\n                    word: 'rocking',\n                    accuracy: '0.09',\n                },\n                {\n                    word: 'rockin',\n                    accuracy: '0.08',\n                },\n                {\n                    word: 'mama',\n                    accuracy: '0.05',\n                },\n                {\n                    word: 'gaga',\n                    accuracy: '0.04',\n                },\n                {\n                    word: 'bloomers',\n                    accuracy: '0.04',\n                },\n            ],\n            highestAccuracy: '0.09',\n        },\n    ],\n};\n","import React, { useState } from 'react';\nimport './App.css';\n\nimport data from './data/db';\n\nconst App: React.FC = () => {\n    const [boardIndex, setBoardIndex] = useState<number>(0);\n    const board = data.boards[boardIndex];\n    const words = board.board;\n\n    const [right, setRight] = useState<string[]>([]);\n    const [wrong, setWrong] = useState<string[]>([]);\n    const grid = words.map(word => {\n        let className: string = 'piece';\n        if (right.includes(word)) {\n            className = 'piece correct';\n        } else if (wrong.includes(word)) {\n            className = 'piece incorrect';\n        }\n        return (\n            <div\n                onClick={() => {\n                    if (board.answers.includes(word)) {\n                        setRight([...right, word]);\n                    } else {\n                        setWrong([...wrong, word]);\n                    }\n                }}\n                className={className}\n            >\n                {word.toUpperCase()}\n            </div>\n        );\n    });\n\n    return (\n        <div className=\"App\">\n            <h2 className=\"title\">Codenames AI</h2>\n            <div className=\"helpText\">\n                Select the three words that are the closest match to the clue\n                provided by the computer\n            </div>\n\n            <div className=\"container\">{grid}</div>\n            <div className=\"clueText\">\n                CLUE:\n                <div className=\"clue\">{board.clues[0].word.toUpperCase()}</div>\n            </div>\n            <div className=\"nextBoardSection\">\n                <div>Board index: {boardIndex}</div>\n                <div\n                    className=\"nextBoardButton\"\n                    onClick={() => {\n                        if (boardIndex === data.boards.length - 1) {\n                            alert('thats all of them folks');\n                            return;\n                        }\n\n                        setBoardIndex(boardIndex + 1);\n                        setRight([]);\n                        setWrong([]);\n                    }}\n                >\n                    Next Board\n                </div>\n                <div className=\"disclaimer\">\n                    These boards have been randomly generated so the quality of\n                    the clue may vary\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}