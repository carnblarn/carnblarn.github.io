{"version":3,"sources":["data/db.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["board","answers","clue","word","accuracy","highestAccuracy","App","useState","boardIndex","setBoardIndex","boards","words","right","setRight","wrong","setWrong","overlay","setOverlay","grid","map","index","className","includes","onClick","length","toUpperCase","nextBoard","undefined","href","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5207ce5c.chunk.js","sourcesContent":["export default [\n    {\n        board: [\n            'berry',\n            'pan',\n            'moscow',\n            'england',\n            'cold',\n            'honey',\n            'diamond',\n            'foot',\n            'strike',\n        ],\n        answers: ['cold', 'berry', 'honey'],\n        clue: { word: 'minty', accuracy: '0.18' },\n        highestAccuracy: '0.18',\n    },\n    {\n        board: [\n            'mine',\n            'horn',\n            'egypt',\n            'stick',\n            'day',\n            'court',\n            'bed',\n            'china',\n            'crash',\n        ],\n        answers: ['mine', 'stick', 'day'],\n        clue: { word: 'ones', accuracy: '0.17' },\n        highestAccuracy: '0.17',\n    },\n    {\n        board: [\n            'card',\n            'czech',\n            'drop',\n            'witch',\n            'gas',\n            'tube',\n            'pan',\n            'octopus',\n            'play',\n        ],\n        answers: ['witch', 'octopus', 'tube'],\n        clue: { word: 'tentacle', accuracy: '0.16' },\n        highestAccuracy: '0.16',\n    },\n    {\n        board: [\n            'europe',\n            'gold',\n            'figure',\n            'boom',\n            'tail',\n            'ivory',\n            'greece',\n            'pistol',\n            'face',\n        ],\n        answers: ['face', 'tail', 'figure'],\n        clue: { word: 'creature', accuracy: '0.16' },\n        highestAccuracy: '0.16',\n    },\n    {\n        board: [\n            'scale',\n            'figure',\n            'tick',\n            'robin',\n            'conductor',\n            'turkey',\n            'game',\n            'drill',\n            'shadow',\n        ],\n        answers: ['scale', 'conductor', 'drill'],\n        clue: { word: 'couplers', accuracy: '0.14' },\n        highestAccuracy: '0.14',\n    },\n    {\n        board: [\n            'australia',\n            'marble',\n            'point',\n            'film',\n            'court',\n            'stick',\n            'pumpkin',\n            'china',\n            'button',\n        ],\n        answers: ['court', 'point', 'marble'],\n        clue: { word: 'overlooks', accuracy: '0.14' },\n        highestAccuracy: '0.14',\n    },\n    {\n        board: [\n            'slip',\n            'pilot',\n            'germany',\n            'stadium',\n            'hollywood',\n            'grass',\n            'paper',\n            'bug',\n            'pistol',\n        ],\n        answers: ['stadium', 'grass', 'hollywood'],\n        clue: { word: 'glendale', accuracy: '0.14' },\n        highestAccuracy: '0.14',\n    },\n    {\n        board: [\n            'bed',\n            'crown',\n            'space',\n            'foot',\n            'hollywood',\n            'opera',\n            'police',\n            'kangaroo',\n            'day',\n        ],\n        answers: ['foot', 'crown', 'bed'],\n        clue: { word: 'arched', accuracy: '0.14' },\n        highestAccuracy: '0.14',\n    },\n    {\n        board: [\n            'change',\n            'mail',\n            'parachute',\n            'mass',\n            'chair',\n            'america',\n            'center',\n            'brush',\n            'iron',\n        ],\n        answers: ['center', 'america', 'change'],\n        clue: { word: 'initiative', accuracy: '0.14' },\n        highestAccuracy: '0.14',\n    },\n    {\n        board: [\n            'lawyer',\n            'eagle',\n            'czech',\n            'triangle',\n            'spy',\n            'snow',\n            'shot',\n            'crane',\n            'undertaker',\n        ],\n        answers: ['crane', 'shot', 'snow'],\n        clue: { word: 'load', accuracy: '0.12' },\n        highestAccuracy: '0.12',\n    },\n];\n","import React, { useState } from 'react';\nimport './App.css';\n\nimport boards from './data/db';\n\ntype Overlay = 'WON' | 'LOST' | 'FREE_GUESS' | undefined;\n\nconst App: React.FC = () => {\n    const [boardIndex, setBoardIndex] = useState<number>(0);\n    const board = boards[boardIndex];\n    const words = board.board;\n\n    const [right, setRight] = useState<string[]>([]);\n    const [wrong, setWrong] = useState<string[]>([]);\n    const [overlay, setOverlay] = useState<Overlay>();\n\n    const grid = words.map((word, index) => {\n        let className: string = 'piece';\n        if (right.includes(word)) {\n            className = 'piece correct';\n        } else if (wrong.includes(word)) {\n            className = 'piece incorrect';\n        }\n        return (\n            <>\n                {index % 3 === 0 && <div className=\"break\" />}\n\n                <div\n                    onClick={() => {\n                        if (\n                            board.answers.includes(word) &&\n                            !right.includes(word)\n                        ) {\n                            setRight([...right, word]);\n                            if (right.length === 2) {\n                                setOverlay('WON');\n                            }\n                        } else if (\n                            !wrong.includes(word) &&\n                            overlay !== 'FREE_GUESS'\n                        ) {\n                            setWrong([...wrong, word]);\n                            setOverlay('LOST');\n                        } else if (!wrong.includes(word)) {\n                            setWrong([...wrong, word]);\n                        }\n                    }}\n                    className={className}\n                >\n                    {word.toUpperCase()}\n                </div>\n            </>\n        );\n    });\n\n    const nextBoard = () => {\n        setBoardIndex(boardIndex + 1);\n        setRight([]);\n        setWrong([]);\n        setOverlay(undefined);\n    };\n\n    return (\n        <div className=\"App\">\n            <h2 className=\"title\">Codenames AI</h2>\n\n            <div className=\"container\">\n                <div className=\"scoreTracker\">{right.length} / 3</div>\n                <div className=\"board\">\n                    {overlay === 'WON' && (\n                        <div className=\"overlay\">\n                            <div>Correct!</div>\n                            <div className=\"button\" onClick={nextBoard}>\n                                Try Another Board\n                            </div>\n                        </div>\n                    )}\n                    {overlay === 'LOST' && (\n                        <div className=\"overlay\">\n                            <div>Game Over</div>\n                            <div\n                                className=\"button\"\n                                onClick={() => {\n                                    setOverlay('FREE_GUESS');\n                                }}\n                            >\n                                Keep Guessing\n                            </div>\n                            <div className=\"button\" onClick={nextBoard}>\n                                Try Another Board\n                            </div>\n                        </div>\n                    )}\n\n                    {grid}\n                </div>\n            </div>\n            <div className=\"clueText\">\n                CLUE\n                <div className=\"clue\">{board.clue.word.toUpperCase()}</div>\n            </div>\n            <div className=\"helpText\">\n                This clue has been automtically generated by a vector space\n                model algorithm. Find the three target words on the board that\n                best match the clue while avoiding the filler words.\n            </div>\n            <div className=\"nextBoardSection\">\n                <div className=\"hr\" />\n                <div className=\"disclaimer\">\n                    From a set of one hundred randomly generated boards, these\n                    ten boards have been selected by the computer as having the\n                    strongest clues. The actual quality may vary.\n                </div>\n                <div className=\"disclaimer\">\n                    Inspiration and intellectual heavy lifting came from&nbsp;\n                    <a href=\"http://jsomers.net/glove-codenames/\">\n                        http://jsomers.net/glove-codenames/\n                    </a>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}