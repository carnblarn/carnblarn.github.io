{"version":3,"sources":["theme.ts","Square.tsx","validate.ts","App.tsx","serviceWorker.js","index.tsx"],"names":["theme","opacity","arguments","length","undefined","concat","Square","_ref","icon","state","cantChange","onPress","isInConnected","isStart","onMouseDown","isInInvalidFourSquare","onMouseUp","onMouseEnter","hasPiece","react_default","a","createElement","md","style","position","fontSize","color","backgroundColor","className","onClick","height","width","boxShadow","borderRadius","display","justifyContent","alignItems","contiguousX","contiguousY","squaresOfColorConnected","grid","startingX","startingY","size","startingSquareObj","square","x","y","squaresStack","visitedSquares","squaresToReturn","currentSquare","shift","push","currentX","currentY","_loop","i","nextX","nextY","nextSquare","alreadyVisited","find","nextSquareObj","SIZE","blacks","whites","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","clickPiece","locked","newColor","changePieceColor","newGrid","cloneDeep","setState","row","id","includes","draggingColor","_this2","rows","connectedBlackSquares","connectedWhiteSquares","invalidFourSquareSets","invalidSquareSets","squares","numBlack","numWhite","forEach","apply","validFourSquares","isFourSquareValid","rowSquares","_loop2","isConnectedBlack","isConnectedWhite","src_Square","key","j","gridIsFull","isFullyConnectedGrid","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.635d6834.chunk.js","sourcesContent":["export default {\r\n    whitePiece: (opacity: number = 1) => `rgba(224, 130, 131, ${opacity})`,\r\n    blackPiece: (opacity: number = 1) => `rgba(52, 73, 94, ${opacity})`,\r\n};\r\n","import React, { Component, useState } from 'react';\r\nimport { MdLock, MdGrade } from 'react-icons/md';\r\nimport './App.css';\r\nimport theme from './theme';\r\n\r\ninterface IProps {\r\n    state: any;\r\n    cantChange: boolean;\r\n    onPress();\r\n    isInConnected: boolean;\r\n    isStart: boolean;\r\n    isInInvalidFourSquare: boolean;\r\n    onMouseDown();\r\n    onMouseUp();\r\n    onMouseEnter();\r\n}\r\n\r\nconst Square = ({\r\n    state,\r\n    cantChange,\r\n    onPress,\r\n    isInConnected,\r\n    isStart,\r\n    isInInvalidFourSquare,\r\n    onMouseDown,\r\n    onMouseUp,\r\n    onMouseEnter,\r\n}: IProps) => {\r\n    const hasPiece = state !== 'empty';\r\n    let icon;\r\n    if (isStart) {\r\n        icon = (\r\n            <MdGrade\r\n                style={{\r\n                    position: 'absolute',\r\n                    fontSize: 24,\r\n                    color: 'rgba(243, 241, 240, 1)',\r\n                }}\r\n            />\r\n        );\r\n    } else if (cantChange) {\r\n        icon = (\r\n            <MdLock\r\n                style={{\r\n                    position: 'absolute',\r\n                    fontSize: 16,\r\n                    color: 'rgba(243, 241, 249, 1)',\r\n                }}\r\n            />\r\n        );\r\n    }\r\n    const opacity = isInConnected ? 1 : 0.7;\r\n    const backgroundColor =\r\n        state === 'white'\r\n            ? theme.whitePiece(opacity)\r\n            : theme.blackPiece(opacity);\r\n    return (\r\n        <div\r\n            className=\"piece\"\r\n            onClick={onPress}\r\n            onMouseDown={onMouseDown}\r\n            onMouseUp={onMouseUp}\r\n            onMouseEnter={onMouseEnter}\r\n        >\r\n            {hasPiece && (\r\n                <div\r\n                    style={{\r\n                        height: '100%',\r\n                        width: '100%',\r\n                        boxShadow: `inset 0px 0px 0px 1px ${\r\n                            state === 'white'\r\n                                ? theme.whitePiece(0.9)\r\n                                : theme.blackPiece(0.9)\r\n                        }`,\r\n\r\n                        borderRadius: 1,\r\n                        backgroundColor: backgroundColor,\r\n                        display: 'flex',\r\n                        justifyContent: 'center',\r\n                        alignItems: 'center',\r\n                    }}\r\n                >\r\n                    {icon}\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Square;\r\n","import { find } from 'lodash';\r\nimport { Grid } from './types';\r\n\r\n// this is such a weird way to do it\r\nconst contiguousX = [-1, 1, 0, 0];\r\nconst contiguousY = [0, 0, -1, 1];\r\n\r\nexport const gridIsFull = (grid: Grid) => {\r\n    const size = grid[0].length;\r\n    for (let i = 0; i < size; i++) {\r\n        for (let j = 0; j < size; j++) {\r\n            if (grid[i][j].state === 'empty') {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n};\r\n\r\nexport const squaresOfColorConnected = (\r\n    grid: Grid,\r\n    startingX: number,\r\n    startingY: number,\r\n    color: 'black' | 'white'\r\n) => {\r\n    const size = grid[0].length;\r\n\r\n    const startingSquareObj = {\r\n        square: grid[startingX][startingY],\r\n        x: startingX,\r\n        y: startingY,\r\n    };\r\n    const squaresStack = [startingSquareObj]; // this more of a \"stack\" than a stack\r\n    const visitedSquares = [startingSquareObj];\r\n\r\n    const squaresToReturn = [];\r\n    while (squaresStack.length) {\r\n        const currentSquare = squaresStack.shift();\r\n        squaresToReturn.push(currentSquare);\r\n        const currentX = currentSquare.x;\r\n        const currentY = currentSquare.y;\r\n\r\n        for (let i = 0; i < contiguousX.length; i += 1) {\r\n            const nextX = contiguousX[i] + currentX;\r\n            const nextY = contiguousY[i] + currentY;\r\n            if (nextX < 0 || nextX >= size) {\r\n                continue;\r\n            }\r\n            if (nextY < 0 || nextY >= size) {\r\n                continue;\r\n            }\r\n            const nextSquare = grid[nextY][nextX];\r\n            const alreadyVisited = find(visitedSquares, square => {\r\n                return square.x === nextX && square.y === nextY;\r\n            });\r\n            if (nextSquare.state === color && !alreadyVisited) {\r\n                const nextSquareObj = {\r\n                    square: nextSquare,\r\n                    x: nextX,\r\n                    y: nextY,\r\n                };\r\n                visitedSquares.push(nextSquareObj);\r\n                squaresStack.push(nextSquareObj);\r\n            }\r\n        }\r\n    }\r\n    return squaresToReturn;\r\n};\r\n\r\nexport const validFourSquares = (grid: Grid) => {\r\n    const size = grid[0].length;\r\n    const invalidSquareSets = [];\r\n    for (let y = 0; y < size - 1; y += 1) {\r\n        for (let x = 0; x < size - 1; x += 1) {\r\n            const squares = [\r\n                grid[y][x],\r\n                grid[y + 1][x],\r\n                grid[y][x + 1],\r\n                grid[y + 1][x + 1],\r\n            ];\r\n            let numBlack = 0;\r\n            let numWhite = 0;\r\n            squares.forEach(square => {\r\n                if (square.state === 'black') {\r\n                    numBlack += 1;\r\n                } else if (square.state === 'white') {\r\n                    numWhite += 1;\r\n                }\r\n            });\r\n            if (numBlack === 4 || numWhite === 4) {\r\n                invalidSquareSets.push(\r\n                    ...[\r\n                        {\r\n                            x,\r\n                            y,\r\n                        },\r\n                        {\r\n                            x: x + 1,\r\n                            y,\r\n                        },\r\n                        {\r\n                            x,\r\n                            y: y + 1,\r\n                        },\r\n                        {\r\n                            x: x + 1,\r\n                            y: y + 1,\r\n                        },\r\n                    ]\r\n                );\r\n            }\r\n        }\r\n    }\r\n    return invalidSquareSets;\r\n};\r\n","import React, { Component, useState } from 'react';\nimport Square from './Square';\nimport { cloneDeep, find } from 'lodash';\nimport './App.css';\nimport { Grid, SquareState } from './types';\nimport {\n    gridIsFull,\n    validFourSquares,\n    squaresOfColorConnected,\n} from './validate';\nimport filled from './filled';\n\nconst SIZE = 10; // cannot be larger than 10\n\n// no 2x2 can all have the same color\n// continguous\n\n// generate:\n// generate: start from scratch and add valid squares\n\ninterface IProps {}\ninterface IState {\n    grid: Grid;\n    draggingColor?: SquareState;\n}\n\nconst blacks = [\n    0,\n    4,\n    16,\n    23,\n    25,\n    31,\n    34,\n    42,\n    54,\n    65,\n    67,\n    72,\n    74,\n    83,\n    86,\n    95,\n    99,\n];\n\nconst whites = [9, 11, 27, 37, 43, 44, 46, 48, 62, 88];\n\nclass App extends Component<IProps, IState> {\n    constructor(props) {\n        super(props);\n        const grid = [];\n        for (let y = 0; y < SIZE; y++) {\n            const row = [];\n            for (let x = 0; x < SIZE; x++) {\n                let id = y * 10 + x;\n                let locked = false;\n                let state = 'empty';\n                if (blacks.includes(id)) {\n                    state = 'black';\n                    locked = true;\n                } else if (whites.includes(id)) {\n                    state = 'white';\n                    locked = true;\n                }\n                row.push({\n                    state,\n                    locked,\n                });\n            }\n            grid.push(row);\n        }\n        this.state = {\n            grid,\n            draggingColor: undefined,\n        };\n    }\n\n    clickPiece = (x: number, y: number) => {\n        const state = this.state.grid[y][x];\n        if (state.locked) {\n            return;\n        }\n        let newColor: SquareState = 'white';\n        if (state.state === 'white') {\n            newColor = 'black';\n        } else if (state.state === 'black') {\n            newColor = 'white';\n        }\n        this.changePieceColor(x, y, newColor);\n    };\n\n    changePieceColor = (x: number, y: number, color: SquareState) => {\n        const state = this.state.grid[y][x];\n        const newGrid = cloneDeep(this.state.grid);\n        newGrid[y][x] = {\n            locked: state.locked,\n            state: color,\n        };\n        this.setState({\n            grid: newGrid,\n        });\n    };\n\n    render() {\n        const rows = [];\n        const connectedBlackSquares = squaresOfColorConnected(\n            this.state.grid,\n            0,\n            0,\n            'black'\n        );\n        const connectedWhiteSquares = squaresOfColorConnected(\n            this.state.grid,\n            SIZE - 1,\n            0,\n            'white'\n        );\n        const invalidFourSquareSets = validFourSquares(this.state.grid);\n        const isFourSquareValid = invalidFourSquareSets.length > 0;\n        for (let y = 0; y < SIZE; y++) {\n            const rowSquares = [];\n            for (let x = 0; x < SIZE; x++) {\n                let id = y * 10 + x;\n                let state = this.state.grid[y][x];\n                const isConnectedBlack = find(connectedBlackSquares, square => {\n                    return square.x === x && square.y === y;\n                });\n                const isConnectedWhite = find(connectedWhiteSquares, square => {\n                    return square.x === x && square.y === y;\n                });\n                const isInInvalidFourSquare = find(\n                    invalidFourSquareSets,\n                    square => {\n                        return square.x === x && square.y === y;\n                    }\n                );\n\n                const isStart = y === 0 && (x === 0 || x === SIZE - 1);\n                rowSquares.push(\n                    <Square\n                        isStart={isStart}\n                        onPress={() => this.clickPiece(x, y)}\n                        isInConnected={isConnectedBlack || isConnectedWhite}\n                        isInInvalidFourSquare={isInInvalidFourSquare}\n                        onMouseDown={() => {\n                            return;\n                            this.setState({\n                                draggingColor: state.state,\n                            });\n                        }}\n                        onMouseEnter={() => {\n                            if (state.locked) {\n                                return;\n                            }\n                            if (this.state.draggingColor) {\n                                this.changePieceColor(\n                                    x,\n                                    y,\n                                    this.state.draggingColor\n                                );\n                            }\n                        }}\n                        onMouseUp={() =>\n                            this.setState({\n                                draggingColor: undefined,\n                            })\n                        }\n                        key={id}\n                        cantChange={state.locked}\n                        state={state.state}\n                    />\n                );\n            }\n            rows.push(\n                <div className=\"flex-row\" key={y}>\n                    {rowSquares}\n                </div>\n            );\n        }\n        const isFullGrid = gridIsFull(this.state.grid);\n        const isFullyConnectedGrid =\n            connectedBlackSquares.length + connectedWhiteSquares.length ===\n            SIZE * SIZE;\n\n        return (\n            <div className=\"container-fluid\">\n                <div className=\"title\">Yang Bang</div>\n                <p>\n                    Fill up the entire board so that every square connects to\n                    the starred square of that color, and so that no 2x2 set of\n                    squares are all the same color\n                </p>\n                {isFullyConnectedGrid && isFourSquareValid && (\n                    <p>Congratulations! You've completed the grid</p>\n                )}\n\n                <div>{rows}</div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}