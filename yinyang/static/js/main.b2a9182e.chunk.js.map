{"version":3,"sources":["Square.tsx","validate.ts","puzzles.ts","Puzzle.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Square","state","cantChange","onPress","isInInvalidFourSquare","isInConnected","hasPiece","backgroundColor","className","onClick","style","height","width","borderRadius","background","border","display","justifyContent","alignItems","position","contiguousX","contiguousY","gridIsFull","grid","size","length","i","j","squaresOfColorConnected","color","y","x","locked","startingX","startingY","Error","findFirstSquareOfColor","startingSquareObj","square","squaresStack","visitedSquares","squaresToReturn","currentSquare","shift","push","currentX","currentY","nextX","nextY","nextSquare","alreadyVisited","find","nextSquareObj","blacks","whites","difficulty","Puzzle","props","clickPiece","newColor","changePieceColor","newGrid","cloneDeep","setState","showCongrats","puzzle","puzzles","puzzleIndex","row","id","includes","currentPuzzle","draggingColor","undefined","rows","connectedBlackSquares","this","connectedWhiteSquares","invalidFourSquareSets","invalidSquareSets","squares","numBlack","numWhite","forEach","validFourSquares","isFourSquareValid","rowSquares","isConnectedBlack","isConnectedWhite","key","isFullyConnectedGrid","isPartiallyConnected","onMouseLeave","top","left","backdropFilter","flexDirection","padding","cursor","alignSelf","userSelect","hasMorePuzzles","nextPuzzle","paddingLeft","paddingRight","textAlign","Component","App","useState","setPuzzleIndex","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b2a9182e.chunk.js","sourcesContent":["import React from 'react';\nimport { SquareState } from './types';\n\nconst LockIcon: React.FC<{ color: string }> = ({ color }) => {\n    return (\n        <svg\n            aria-hidden=\"true\"\n            focusable=\"false\"\n            width=\".7em\"\n            height=\".7em\"\n            preserveAspectRatio=\"xMidYMid meet\"\n            viewBox=\"0 0 512 512\"\n        >\n            <path\n                d=\"M376 186h-20v-40c0-55-45-100-100-100S156 91 156 146v40h-20c-22.002 0-40 17.998-40 40v200c0 22.002 17.998 40 40 40h240c22.002 0 40-17.998 40-40V226c0-22.002-17.998-40-40-40zM256 368c-22.002 0-40-17.998-40-40s17.998-40 40-40 40 17.998 40 40-17.998 40-40 40zm62.002-182H193.998v-40c0-34.004 28.003-62.002 62.002-62.002 34.004 0 62.002 27.998 62.002 62.002v40z\"\n                fill={color}\n            />\n        </svg>\n    );\n};\n\ninterface Props {\n    state: SquareState;\n    cantChange: boolean;\n    onPress(): void;\n    isInConnected: boolean;\n    isInInvalidFourSquare: boolean;\n}\n\nconst Square: React.FC<Props> = ({\n    state,\n    cantChange,\n    onPress,\n    isInConnected,\n    isInInvalidFourSquare,\n}) => {\n    const hasPiece = state !== 'empty';\n    let icon;\n\n    if (cantChange) {\n        icon = <LockIcon color={state === 'white' ? '#444' : '#DDD'} />;\n    }\n    let backgroundColor = state === 'white' ? '#FFF' : '#222';\n    const size = '70%';\n    return (\n        <div\n            className={`piece ${cantChange && 'locked'} ${\n                isInInvalidFourSquare && 'invalid'\n            }`}\n            onClick={onPress}\n        >\n            {hasPiece && (\n                <div\n                    style={{\n                        height: size,\n                        width: size,\n                        borderRadius: cantChange ? '30%' : '50%',\n                        background: backgroundColor,\n                        border: '1.5px solid #222',\n                        display: 'flex',\n                        justifyContent: 'center',\n                        alignItems: 'center',\n                        position: 'absolute',\n                    }}\n                ></div>\n            )}\n        </div>\n    );\n};\n\nexport default Square;\n","import { find } from 'lodash';\nimport { Grid, Square } from './types';\n\n// this is such a weird way to do it\nconst contiguousX = [-1, 1, 0, 0];\nconst contiguousY = [0, 0, -1, 1];\n\nexport const gridIsFull = (grid: Grid) => {\n    const size = grid[0].length;\n    for (let i = 0; i < size; i++) {\n        for (let j = 0; j < size; j++) {\n            if (grid[i][j].state === 'empty') {\n                return false;\n            }\n        }\n    }\n    return true;\n};\n\nconst findFirstSquareOfColor = (grid: Grid, color: 'black' | 'white') => {\n    for (let y = 0; y < grid.length; y++) {\n        for (let x = 0; x < grid[y].length; x++) {\n            if (grid[y][x].state === color && grid[y][x].locked === true) {\n                return {\n                    startingX: x,\n                    startingY: y,\n                };\n            }\n        }\n    }\n    throw new Error('must have at least one square of each color');\n};\n\nexport const squaresOfColorConnected = (\n    grid: Grid,\n    color: 'black' | 'white'\n): {\n    square: Square;\n    x: number;\n    y: number;\n}[] => {\n    const size = grid[0].length;\n\n    const { startingX, startingY } = findFirstSquareOfColor(grid, color);\n\n    const startingSquareObj = {\n        square: grid[startingX][startingY],\n        x: startingX,\n        y: startingY,\n    };\n    const squaresStack = [startingSquareObj]; // this more of a \"stack\" than a stack\n    const visitedSquares = [startingSquareObj];\n\n    const squaresToReturn = [];\n    while (squaresStack.length) {\n        // Asserting this because it's inside the length conditional\n        const currentSquare = squaresStack.shift()!;\n        squaresToReturn.push(currentSquare);\n        const currentX = currentSquare.x;\n        const currentY = currentSquare.y;\n\n        for (let i = 0; i < contiguousX.length; i += 1) {\n            const nextX = contiguousX[i] + currentX;\n            const nextY = contiguousY[i] + currentY;\n            if (nextX < 0 || nextX >= size) {\n                continue;\n            }\n            if (nextY < 0 || nextY >= size) {\n                continue;\n            }\n            const nextSquare = grid[nextY][nextX];\n            const alreadyVisited = find(visitedSquares, (square) => {\n                return square.x === nextX && square.y === nextY;\n            });\n            if (nextSquare.state === color && !alreadyVisited) {\n                const nextSquareObj = {\n                    square: nextSquare,\n                    x: nextX,\n                    y: nextY,\n                };\n                visitedSquares.push(nextSquareObj);\n                squaresStack.push(nextSquareObj);\n            }\n        }\n    }\n    return squaresToReturn;\n};\n\nexport const validFourSquares = (grid: Grid) => {\n    const size = grid[0].length;\n    const invalidSquareSets = [];\n    for (let y = 0; y < size - 1; y += 1) {\n        for (let x = 0; x < size - 1; x += 1) {\n            const squares = [\n                grid[y][x],\n                grid[y + 1][x],\n                grid[y][x + 1],\n                grid[y + 1][x + 1],\n            ];\n            let numBlack = 0;\n            let numWhite = 0;\n            squares.forEach((square) => {\n                if (square.state === 'black') {\n                    numBlack += 1;\n                } else if (square.state === 'white') {\n                    numWhite += 1;\n                }\n            });\n            if (numBlack === 4 || numWhite === 4) {\n                invalidSquareSets.push(\n                    {\n                        x,\n                        y,\n                    },\n                    {\n                        x: x + 1,\n                        y,\n                    },\n                    {\n                        x,\n                        y: y + 1,\n                    },\n                    {\n                        x: x + 1,\n                        y: y + 1,\n                    }\n                );\n            }\n        }\n    }\n    return invalidSquareSets;\n};\n","export default [\n    {\n        size: 9,\n        blacks: [4, 13, 15, 26, 42, 44, 46, 51, 55, 57, 66, 75],\n        whites: [22, 24, 31, 33, 35, 37, 40, 48, 53, 62, 64, 73, 84],\n        difficulty: 2,\n    },\n    {\n        blacks: [\n            0,\n            1,\n            2,\n            3,\n            4,\n            10,\n            16,\n            20,\n            23,\n            25,\n            30,\n            31,\n            34,\n            40,\n            42,\n            50,\n            54,\n            60,\n            65,\n            67,\n            70,\n            72,\n            74,\n            80,\n            83,\n            86,\n            90,\n            91,\n            92,\n            93,\n            94,\n            96,\n            95,\n            97,\n            98,\n            99,\n        ],\n        whites: [5, 6, 7, 8, 9, 11, 27, 37, 43, 44, 46, 48, 62, 88],\n        size: 10,\n        difficulty: 3,\n    },\n\n    {\n        size: 10,\n        blacks: [17, 31, 32, 42, 52, 61, 62, 83],\n        whites: [14, 24, 37, 38, 45, 47, 57, 64, 67, 68, 75, 76, 82],\n        difficulty: 4,\n    },\n    {\n        size: 9,\n        difficulty: 5,\n        blacks: [13, 27, 43, 45, 61, 65, 74],\n        whites: [\n            0,\n            1,\n            2,\n            3,\n            4,\n            5,\n            6,\n            7,\n            8,\n            10,\n            12,\n            18,\n            20,\n            28,\n            30,\n            38,\n            40,\n            44,\n            48,\n            50,\n            55,\n            58,\n            60,\n            68,\n            70,\n            75,\n            78,\n            80,\n            81,\n            82,\n            83,\n            84,\n            85,\n            86,\n            87,\n            88,\n        ],\n    },\n];\n","import React, { Component } from 'react';\nimport Square from './Square';\nimport { cloneDeep, find } from 'lodash';\nimport { Grid, SquareState } from './types';\nimport {\n    validFourSquares,\n    squaresOfColorConnected,\n    gridIsFull,\n} from './validate';\nimport puzzles from './puzzles';\n\ninterface Props {\n    puzzleIndex: number;\n    nextPuzzle: () => void;\n    hasMorePuzzles: boolean;\n}\n\ninterface State {\n    grid: Grid;\n    draggingColor?: SquareState;\n    currentPuzzle: any;\n    showCongrats: boolean;\n    size: number; // cannot be larger than 10\n}\n\nclass Puzzle extends Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        const grid = [];\n        const puzzle = puzzles[this.props.puzzleIndex];\n        for (let y = 0; y < puzzle.size; y++) {\n            const row = [];\n            for (let x = 0; x < puzzle.size; x++) {\n                let id = y * 10 + x;\n                let locked = false;\n                let state: SquareState = 'empty';\n                if (puzzle.blacks.includes(id)) {\n                    state = 'black';\n                    locked = true;\n                } else if (puzzle.whites.includes(id)) {\n                    state = 'white';\n                    locked = true;\n                }\n                row.push({\n                    state,\n                    locked,\n                });\n            }\n            grid.push(row);\n        }\n        this.state = {\n            grid,\n            currentPuzzle: puzzle,\n            draggingColor: undefined,\n            showCongrats: false,\n            size: puzzle.size,\n        };\n    }\n\n    clickPiece = (x: number, y: number) => {\n        const state = this.state.grid[y][x];\n        if (state.locked) {\n            return;\n        }\n        let newColor: SquareState = 'white';\n        if (state.state === 'white') {\n            newColor = 'black';\n        } else if (state.state === 'black') {\n            newColor = 'empty';\n        }\n        this.changePieceColor(x, y, newColor);\n    };\n\n    changePieceColor = (x: number, y: number, color: SquareState) => {\n        const state = this.state.grid[y][x];\n        const newGrid = cloneDeep(this.state.grid);\n        newGrid[y][x] = {\n            locked: state.locked,\n            state: color,\n        };\n        this.setState({\n            grid: newGrid,\n            showCongrats: true,\n        });\n    };\n\n    render() {\n        const rows = [];\n        const connectedBlackSquares = squaresOfColorConnected(\n            this.state.grid,\n            'black'\n        );\n        const connectedWhiteSquares = squaresOfColorConnected(\n            this.state.grid,\n            'white'\n        );\n        const invalidFourSquareSets = validFourSquares(this.state.grid);\n        const isFourSquareValid = invalidFourSquareSets.length === 0;\n\n        let numWhite = 0;\n        let numBlack = 0;\n        for (let y = 0; y < this.state.size; y++) {\n            const rowSquares = [];\n            for (let x = 0; x < this.state.size; x++) {\n                let id = y * 10 + x;\n                let state = this.state.grid[y][x];\n                const isConnectedBlack = find(\n                    connectedBlackSquares,\n                    (square) => {\n                        return square.x === x && square.y === y;\n                    }\n                );\n                const isConnectedWhite = find(\n                    connectedWhiteSquares,\n                    (square) => {\n                        return square.x === x && square.y === y;\n                    }\n                );\n                const isInInvalidFourSquare = find(\n                    invalidFourSquareSets,\n                    (square) => {\n                        return square.x === x && square.y === y;\n                    }\n                );\n                if (state.state === 'black') {\n                    numBlack++;\n                } else if (state.state === 'white') {\n                    numWhite++;\n                }\n                rowSquares.push(\n                    <Square\n                        onPress={() => this.clickPiece(x, y)}\n                        isInConnected={!!(isConnectedBlack || isConnectedWhite)}\n                        isInInvalidFourSquare={!!isInInvalidFourSquare}\n                        key={id}\n                        cantChange={state.locked}\n                        state={state.state}\n                    />\n                );\n            }\n            rows.push(\n                <div className=\"flex-row\" key={y}>\n                    {rowSquares}\n                </div>\n            );\n        }\n        const isFullyConnectedGrid =\n            connectedBlackSquares.length + connectedWhiteSquares.length ===\n            this.state.size * this.state.size;\n        // This condition does not require every square to be filled in, unlike the above\n        const isPartiallyConnected =\n            connectedBlackSquares.length === numBlack &&\n            connectedWhiteSquares.length === numWhite;\n        return (\n            <div className=\"container-fluid\">\n                <div\n                    style={{\n                        position: 'relative',\n                        border: '3px solid #333',\n                        borderRadius: '3px',\n                    }}\n                    onMouseLeave={() =>\n                        this.setState({ draggingColor: undefined })\n                    }\n                >\n                    {rows}\n                    {this.state.showCongrats &&\n                        isFullyConnectedGrid &&\n                        isFourSquareValid && (\n                            <div\n                                className=\"congrats\"\n                                style={{\n                                    position: 'absolute',\n                                    height: '100%',\n                                    width: '100%',\n                                    top: 0,\n                                    left: 0,\n                                    backdropFilter: 'blur(4px)',\n                                    backgroundColor: 'rgba(100,100,100,.7)',\n                                    display: 'flex',\n                                    justifyContent: 'center',\n                                    alignItems: 'center',\n                                    color: 'white',\n                                }}\n                            >\n                                <div\n                                    style={{\n                                        display: 'flex',\n                                        alignItems: 'center',\n                                        flexDirection: 'column',\n                                        backgroundColor: 'white',\n                                        borderRadius: 4,\n                                        color: '#222',\n                                        padding: '20px',\n                                    }}\n                                >\n                                    <div\n                                        style={{\n                                            cursor: 'pointer',\n                                            alignSelf: 'flex-end',\n                                            padding: '4px',\n                                            userSelect: 'none',\n                                        }}\n                                        onClick={() =>\n                                            this.setState({\n                                                showCongrats: false,\n                                            })\n                                        }\n                                    >\n                                        X\n                                    </div>\n                                    <h2>Congratulations!</h2>\n                                    <p>You've completed the puzzle</p>\n                                    {this.props.hasMorePuzzles && (\n                                        <div\n                                            style={{\n                                                display: 'flex',\n                                                justifyContent: 'center',\n                                            }}\n                                        >\n                                            <div\n                                                onClick={this.props.nextPuzzle}\n                                                className=\"btn\"\n                                            >\n                                                Next\n                                            </div>\n                                        </div>\n                                    )}\n                                </div>\n                            </div>\n                        )}\n                </div>\n                <p\n                    style={{\n                        paddingLeft: 20,\n                        paddingRight: 20,\n                        textAlign: 'center',\n                        userSelect: 'none',\n                    }}\n                >\n                    Complete the board so that the following are true:\n                </p>\n                <ul className=\"rules\">\n                    <li\n                        style={{\n                            color: gridIsFull(this.state.grid)\n                                ? '#111'\n                                : '#888',\n                        }}\n                    >\n                        Every square contains a black or white circle\n                    </li>\n                    <li\n                        style={{\n                            color: isPartiallyConnected ? '#111' : '#888',\n                        }}\n                    >\n                        Every black circles connects to every other black\n                        circle, and every white circle connects to every other\n                        white circle\n                    </li>\n                    <li\n                        style={{\n                            color: isFourSquareValid ? '#111' : '#888',\n                        }}\n                    >\n                        No 2 x 2 section can contain circles of all the same\n                        color\n                    </li>\n                </ul>\n            </div>\n        );\n    }\n}\n\nexport default Puzzle;\n","import React, { useState } from 'react';\nimport './App.css';\nimport Puzzle from './Puzzle';\nimport puzzles from './puzzles';\n\nfunction App() {\n    const [puzzleIndex, setPuzzleIndex] = useState(0);\n\n    const nextPuzzle = () => {\n        setPuzzleIndex(puzzleIndex + 1);\n    };\n\n    const hasMorePuzzles = puzzleIndex !== puzzles.length - 1;\n\n    return (\n        <div className=\"container-fluid\">\n            <div className=\"info\">\n                <div className=\"title\">Yin-Yang Puzzle</div>\n            </div>\n            <div className=\"subtitle\">\n                <div></div>\n                <div>Difficulty: {puzzles[puzzleIndex].difficulty}/5</div>\n            </div>\n            <Puzzle\n                nextPuzzle={nextPuzzle}\n                key={puzzleIndex}\n                puzzleIndex={puzzleIndex}\n                hasMorePuzzles={hasMorePuzzles}\n            />\n            {hasMorePuzzles && (\n                <div style={{ display: 'flex', justifyContent: 'center' }}>\n                    <div className=\"btn\" onClick={nextPuzzle}>\n                        Next\n                    </div>\n                </div>\n            )}\n\n            <p style={{ userSelect: 'none' }}>\n                Puzzles came from{' '}\n                <a href=\"https://jacoblance.wordpress.com/\">\n                    Jack Lance Puzzles\n                </a>{' '}\n                and{' '}\n                <a href=\"http://wa1729.blogspot.com/\">\n                    http://wa1729.blogspot.com/\n                </a>\n            </p>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}